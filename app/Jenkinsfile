pipeline {
    agent any
    environment {
        REGISTRY = 'mbarrionuevok8s'
        DOCKER_HUB_LOGIN = credentials('dockerHub')
        RESULT = 'app/result'
        VOTE = 'app/vote'
        WORKER = 'app/worker'
        CHANGELOG_FILE = 'app/CHANGELOG.md'
        VERSION_PATTERN = '## \\[[0-9]*\\.[0-9]*\\.[0-9]*\\]'
    }
    stages {
        stage('Build') {
            steps {
                script {
                    // chequeo si la version existe en changelog
                    if (fileExists(CHANGELOG_FILE)) {
                        def versionLine = sh(script: "grep -E \"${VERSION_PATTERN}\" \"${CHANGELOG_FILE}\" | head -n 1", returnStdout: true).trim()
                        if (versionLine) {
                            version = sh(script: "echo \"${versionLine}\" | grep -oE \"[0-9]*\\.[0-9]*\\.[0-9]*\"", returnStdout: true).trim()
                            echo "Versi贸n encontrada en el changelog: ${version}"
                        } else {
                            error 'No se encontr贸 la versi贸n en el changelog.'
                        }
                    } else {
                        error "No se encontr贸 el archivo changelog: ${CHANGELOG_FILE}"
                    }
                        //login dockerHub    
                        docker.withRegistry('https://registry.hub.docker.com', 'CREDENCIALES_DOCKER_HUB') {
                            // Build Docker images
                            buildDockerImage("$REGISTRY/result", "$version", "$RESULT")
                            buildDockerImage("$REGISTRY/vote", "$version", "$VOTE")
                            buildDockerImage("$REGISTRY/worker", "$version", "$WORKER")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Login Docker Hub
                    docker.withRegistry('https://registry.hub.docker.com', 'CREDENCIALES_DOCKER_HUB') {
                        // Push Docker images
                        pushDockerImage("$REGISTRY/result", "$version")
                        pushDockerImage("$REGISTRY/vote", "$version")
                        pushDockerImage("$REGISTRY/worker", "$version")
                    }
                }
            }
        }
    }
}

// Function to build Docker image
def buildDockerImage(imageName, version, directory) {
    dir(directory) {
        sh """
            docker build -t $imageName:$version .
        """
    }
}

// Function to push Docker image
def pushDockerImage(imageName, version) {
    sh """
        docker push $imageName:$version
    """
}
