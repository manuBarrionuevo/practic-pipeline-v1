@Library('dockerBuildDeploy') _
import dockerBuildDeploy

def dockerBuildDeployInstance = dockerBuildDeploy()

pipeline {
    agent any
    environment {
        CHANGELOG_FILE = 'app/CHANGELOG.md'
        VERSION_PATTERN = '## \\[[0-9]*\\.[0-9]*\\.[0-9]*\\]'
        BRANCH_NAME = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
    }
    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        dockerBuildDeployInstance.validateDirectories([CHANGELOG_FILE, 'app/result', 'app/vote', 'app/worker'])

                        // Chequeo si la versión existe en changelog
                        def versionLine = sh(script: "grep -E \"${VERSION_PATTERN}\" \"${CHANGELOG_FILE}\" | head -n 1", returnStdout: true).trim()

                        if (!versionLine) {
                            error 'No se encontró la versión en el changelog.'
                        }

                        // Definir versión
                        def version = sh(script: "echo \"${versionLine}\" | grep -oE \"[0-9]*\\.[0-9]*\\.[0-9]*\"", returnStdout: true).trim()
                        echo "Versión encontrada en el changelog: ${version}"

                        env.VERSION = version

                        // Docker login
                        if (dockerBuildDeployInstance.dockerLogin('https://registry.example.com')) {
                            dockerBuildDeployInstance.buildDockerImage("${DOCKER_USER}/result", "${version}", 'app/result')
                            dockerBuildDeployInstance.buildDockerImage("${DOCKER_USER}/vote", "${version}", 'app/vote')
                            dockerBuildDeployInstance.buildDockerImage("${DOCKER_USER}/worker", "${version}", 'app/worker')
                        }
                    } catch (Exception e) {
                        echo "Error en la etapa de Build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Hubo un error durante la etapa de Build.'
                    }
                }
            }
        } // fin stage build

        stage('Deploy') {
            steps {
                script {
                    try {
                        // Docker login
                        if (dockerBuildDeployInstance.dockerLogin('https://registry.example.com')) {
                            dockerBuildDeployInstance.validateDirectories(['app/result', 'app/vote', 'app/worker'])

                            dockerBuildDeployInstance.pushDockerImage("${DOCKER_USER}/result", "${env.VERSION}", 'app/result')
                            dockerBuildDeployInstance.pushDockerImage("${DOCKER_USER}/vote", "${env.VERSION}", 'app/vote')
                            dockerBuildDeployInstance.pushDockerImage("${DOCKER_USER}/worker", "${env.VERSION}", 'app/worker')
                        }
                    } catch (Exception e) {
                        echo "Error en la etapa de Deploy: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Hubo un error durante la etapa de Deploy.'
                    }
                }
            }
        } // fin stage deploy
    } // fin stage global
    post {
        success {
            script {
                // Obtener información de la construcción y el proyecto
                def buildUrl = env.BUILD_URL
                def projectName = env.JOB_NAME

                // Obtener información del autor del último commit
                def commitAuthor = sh(script: 'git log --format=%an -n 1', returnStdout: true).trim()

                // Obtener el nombre de la rama desde la variable de entorno
                def branchName = env.BRANCH_NAME

                // Construir el mensaje de éxito con información adicional
                def successMessage = 'Pipeline succeeded\n' +
                             "Project: ${projectName}\n" +
                             "Build URL: ${buildUrl}\n" +
                             "Version: ${env.VERSION}\n" +
                             "Commit Author: ${commitAuthor}\n" +
                             "Branch Name: ${branchName}"

                // Notificar a Slack en caso de éxito en todas las etapas utilizando la configuración global
                slackSend(color: 'good', message: successMessage)
            }
        }
    }
} // fin pipeline
