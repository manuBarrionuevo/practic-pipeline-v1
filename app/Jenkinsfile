pipeline {
    agent any
    environment {
        REGISTRY = 'mbarrionuevok8s'
        DOCKER_HUB_LOGIN = credentials('dockerHub')
        RESULT = 'app/result'
        VOTE = 'app/vote'
        WORKER = 'app/worker'
        CHANGELOG_FILE = 'app/CHANGELOG.md'
        VERSION_PATTERN = '## \\[[0-9]*\\.[0-9]*\\.[0-9]*\\]'
    }
    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        validateDirectories([CHANGELOG_FILE, RESULT, VOTE, WORKER])

                        // chequeo si la version existe en changelog
                        def versionLine = sh(script: "grep -E \"${VERSION_PATTERN}\" \"${CHANGELOG_FILE}\" | head -n 1", returnStdout: true).trim()

                        if (!versionLine) {
                            error 'No se encontró la versión en el changelog.'
                        }

                        // Definir version
                        def version = sh(script: "echo \"${versionLine}\" | grep -oE \"[0-9]*\\.[0-9]*\\.[0-9]*\"", returnStdout: true).trim()
                        echo "Versión encontrada en el changelog: ${version}"

                        env.VERSION = version

                        // Docker login
                        withDockerRegistry([credentialsId: 'dockerHub']) {
                            buildDockerImage("$REGISTRY/result", "${version}", RESULT)
                            buildDockerImage("$REGISTRY/vote", "${version}", VOTE)
                            buildDockerImage("$REGISTRY/worker", "${version}", WORKER)
                        }
                    } catch (Exception e) {
                        echo "Error en la etapa de Build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Hubo un error durante la etapa de Build.'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    try {
                        // Docker login
                        withDockerRegistry([credentialsId: 'dockerHub']) {
                            validateDirectories([RESULT, VOTE, WORKER])

                            pushDockerImage("$REGISTRY/result", "${env.VERSION}", RESULT)
                            pushDockerImage("$REGISTRY/vote", "${env.VERSION}", VOTE)
                            pushDockerImage("$REGISTRY/worker", "${env.VERSION}", WORKER)
                        }
                    } catch (Exception e) {
                        echo "Error en la etapa de Deploy: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Hubo un error durante la etapa de Deploy.'
                    }
                }
            }
        }
    }
}

// función build Docker image
def buildDockerImage(imageName, version, directory) {
    dir(directory) {
        sh """
            docker build -t $imageName:$version .
        """
    }
}

// función push Docker image
def pushDockerImage(imageName, version, directory) {
    sh """
        docker push $imageName:$version
    """
}

// función para validar la existencia de directorios
def validateDirectories(directories) {
    for (dir in directories) {
        if (!fileExists(dir)) {
            error "No se encontró el directorio: ${dir}"
        }
    }
}