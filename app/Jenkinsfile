@Library('DockerBuildDeploy')

pipeline {
    agent any
    environment {
        CHANGELOG_FILE = 'app/CHANGELOG.md'
        VERSION_PATTERN = '## \\[[0-9]*\\.[0-9]*\\.[0-9]*\\]'
    }
    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        validateDirectories([CHANGELOG_FILE, 'app/result', 'app/vote', 'app/worker'])

                        // chequeo si la version existe en changelog
                        def versionLine = sh(script: "grep -E \"${VERSION_PATTERN}\" \"${CHANGELOG_FILE}\" | head -n 1", returnStdout: true).trim()

                        if (!versionLine) {
                            error 'No se encontró la versión en el changelog.'
                        }

                        // Definir version
                        def version = sh(script: "echo \"${versionLine}\" | grep -oE \"[0-9]*\\.[0-9]*\\.[0-9]*\"", returnStdout: true).trim()
                        echo "Versión encontrada en el changelog: ${version}"

                        env.VERSION = version

                        // Docker login
                        if (dockerLogin("https://registry.example.com")) {
                            buildDockerImage("${DOCKER_USER}/result", "${version}", 'app/result')
                            buildDockerImage("${DOCKER_USER}/vote", "${version}", 'app/vote')
                            buildDockerImage("${DOCKER_USER}/worker", "${version}", 'app/worker')
                        }
                    } catch (Exception e) {
                        echo "Error en la etapa de Build: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error 'Hubo un error durante la etapa de Build.'
                    }
                }
            }
        } //fin stage build

        stage('Deploy') {
            steps {
                script {
                    try {
                            // Docker login
                             if (dockerLogin("https://registry.example.com")) {
                                
                                    validateDirectories(['app/result', 'app/vote', 'app/worker'])

                                    pushDockerImage("${DOCKER_USER}/result", "${env.VERSION}", 'app/result')
                                    pushDockerImage("${DOCKER_USER}/vote", "${env.VERSION}", 'app/vote')
                                    pushDockerImage("${DOCKER_USER}/worker", "${env.VERSION}", 'app/worker')
                                
                            }
                        }catch (Exception e){
                                echo "Error en la etapa de Deploy: ${e.message}"
                                currentBuild.result = 'FAILURE'
                                error 'Hubo un error durante la etapa de Deploy.'
                    }
                }
            }

        } //fin stage deploy

    } //fin stage global
    
} //fin pipeline